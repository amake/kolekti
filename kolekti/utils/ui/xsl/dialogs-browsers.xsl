<?xml version="1.0" encoding="utf-8"?>
<!--

     kOLEKTi : a structural documentation generator
     Copyright (C) 2007-2010 Stéphane Bonhomme (stephane@exselt.com)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

-->
<?doc UI generation for browser component
?>
<?author Stéphane Bonhomme <stephane@exselt.com>?>

<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:h="http://www.w3.org/1999/xhtml"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:i="kolekti:i18n"
                xmlns:kf="kolekti:extensions:functions"
                xmlns:ke="kolekti:extensions:elements"
                xmlns:kd="kolekti:dialogs"
                xmlns:e="http://exslt.org/common"
                extension-element-prefixes="ke e"
                exclude-result-prefixes="i kf kd h e">

  <xsl:template match="/h:html//kd:ajaxbrowser|/kd:action/kd:dialog//kd:ajaxbrowser" mode="include">
    <!-- include for browser with js specific implementation -->
    <xsl:if test="@class">
      <xsl:if test="not(preceding::kd:ajaxbrowser[@class=current()/@class])">
        <script type="text/javascript" src="/_lib/app/scripts/browsers/kolekti-{@class}.js">
          <xsl:text>&#x0D;</xsl:text>
        </script>
        <link href="/_lib/app/css/browsers/kolekti-{@class}.css" media="all" rel="stylesheet" type="text/css" />
      </xsl:if>

    </xsl:if>

    <xsl:for-each select="kd:actions/kd:action">
      <xsl:apply-templates select="." mode="include"/>
    </xsl:for-each>

    <script type="text/javascript">
      <xsl:apply-templates select="." mode="head"/>
    </script>
  </xsl:template>


  <!--  **********************  -->
  <!--  ajaxBrowser component   -->
  <!--  **********************  -->

  <!--  **********************  -->
  <!--  ajaxBrowser head part   -->
  <!--  **********************  -->

  <xsl:template match="kd:ajaxbrowser" mode="head">
    <!-- script generated by a brower object -->
    <xsl:variable name="browser">kolekti.browsers['<xsl:value-of select="@id"/>']</xsl:variable>

    <!-- instanciate the browser object -->
    <xsl:choose>
      <xsl:when test="@class">
        <xsl:value-of select="$browser"/> = new <xsl:value-of select="@class"/>('<xsl:value-of select="@id"/>');
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$browser"/> = new kolekti_browser('<xsl:value-of select="@id"/>');
      </xsl:otherwise>
    </xsl:choose>

    <xsl:if test="@keep_active_items">
      <xsl:value-of select="$browser"/>.selection.keep_active_items=<xsl:value-of select="@keep_active_items" />;
    </xsl:if>
    
    <!--<xsl:value-of select="$browser"/>.initevent();-->
    <xsl:value-of select="$browser"/>.display='<xsl:value-of select="@display"/>';

    <!-- register the tabs -->
    <xsl:variable name="ctab" select="kf:get_session_value(concat('/',@id))"/>

    <xsl:apply-templates select="kd:tab" mode="script">
      <xsl:with-param name="ctab" select="$ctab"/>
    </xsl:apply-templates>

    <xsl:if test="not($ctab)">
      <xsl:value-of select="$browser"/>.inittab='<xsl:value-of select="kd:tab[1]/@id"/>';
    </xsl:if>

    <xsl:if test="ancestor::kd:dialog">
      <!-- if the browser is in a dialog, prevent from loading at page load -->
      <xsl:value-of select="$browser"/>.inittab=null;
      <xsl:value-of select="$browser"/>.inittab_dialog='<xsl:value-of select="kd:tab[1]/@id"/>';
      <xsl:value-of select="$browser"/>.is_in_dialog=true;
    </xsl:if>

    <!-- adds the init handler on document loaded -->

    var initf=<xsl:value-of select="$browser"/>.init();
    addEventListener('load',initf,false);
    var tmpobj;

    <xsl:apply-templates select="kd:behavior"  mode="script"/>
    <xsl:apply-templates select="kd:actions"   mode="script"/>
    <xsl:apply-templates select="kd:layout/kd:property"   mode="script"/>
  </xsl:template>


  <!--ajax browser : register the behaviors -->

  <xsl:template match="kd:ajaxbrowser/kd:behavior/*"  mode="script">
    <xsl:variable name="browser">kolekti.browsers['<xsl:value-of select="ancestor::kd:ajaxbrowser/@id"/>']</xsl:variable>
    tmpobj=new Object();
    <xsl:value-of select="$browser"/>.behaviors['<xsl:value-of select="@id"/>']=tmpobj;
    tmpobj.type='<xsl:value-of select="local-name()"/>';
    <xsl:apply-templates select="@*|@i:*"  mode="script"/>
  </xsl:template>

  <xsl:template match="kd:ajaxbrowser/kd:behavior//@*" mode="script">
    tmpobj.<xsl:value-of select="local-name()"/>='<xsl:value-of select="."/>';
  </xsl:template>


  <!--register the actions -->

  <xsl:template match="kd:ajaxbrowser/kd:actions" mode="script">
    <xsl:variable name="browser">kolekti.browsers['<xsl:value-of select="ancestor::kd:ajaxbrowser/@id"/>']</xsl:variable>
    <xsl:for-each select="kd:action">
      tmpobj=new Object();
      <xsl:if test="@shortname|@i:shortname">
         tmpobj.shortname='<xsl:apply-template select="@shortname|i:shortname"/>';
      </xsl:if>
      <xsl:value-of select="$browser"/>.actions['<xsl:value-of select="@ref"/>']=tmpobj;
      <xsl:apply-templates select="document(concat($kolektiapp,'/ui/actions/',@ref,'.xml'))" mode="browseractions"/>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="/kd:action" mode="browseractions">
    <xsl:if test="kd:icon">
      tmpobj.icon='<xsl:value-of select="kd:icon"/>';
    </xsl:if>
    <xsl:apply-templates select="@*|@i:*" mode="browseractions"/>
  </xsl:template>

  <xsl:template match="/kd:action/@*|/kd:action/@i:*" mode="browseractions">
    tmpobj.<xsl:value-of select="local-name()"/>='<xsl:apply-templates select="." mode="i18n" />';
  </xsl:template>

  <!--register the properties -->

  <xsl:template match="kd:ajaxbrowser/kd:layout/kd:property" mode="script">
    <xsl:variable name="browser">kolekti.browsers['<xsl:value-of select="ancestor::kd:ajaxbrowser/@id"/>']</xsl:variable>
    tmpobj=new Object();
    <xsl:value-of select="$browser"/>.properties.push(tmpobj);
    <xsl:apply-templates select="@*" mode="script"/>
  </xsl:template>

  <xsl:template match="kd:ajaxbrowser/kd:layout/kd:property/@*" mode="script">
    tmpobj.<xsl:value-of select="local-name()"/>='<xsl:value-of select="."/>';
  </xsl:template>

  <!-- register the tabs -->

  <xsl:template match="kd:ajaxbrowser/kd:tab" mode="script">
    <xsl:param name="ctab"/>    <!-- default opened tab -->
    <xsl:variable name="browser">kolekti.browsers['<xsl:value-of select="ancestor::kd:ajaxbrowser/@id"/>']</xsl:variable>

    <xsl:variable name="tab"><xsl:value-of select="$browser"/>.tabs['<xsl:value-of select="@id"/>']</xsl:variable>
    <xsl:value-of select="$tab"/>=new Object();
    <xsl:choose>
      <xsl:when test="@dir">
        <xsl:value-of select="$tab"/>.dir='<xsl:value-of select="kf:id2url(string(@dir))"/>';
      </xsl:when>
      <xsl:when test="@object">
        <xsl:value-of select="$tab"/>.object=new <xsl:value-of select="@object"/>();
        <xsl:value-of select="$tab"/>.object.init("subdir_<xsl:value-of select="../@id"/>");
      </xsl:when>
    </xsl:choose>
    <xsl:if test="$ctab=@id">
      <xsl:value-of select="$browser"/>.inittab='<xsl:value-of select="@id"/>';
    </xsl:if>
    <!--
        <xsl:value-of select="$browser"/>.init_behavior('<xsl:value-of select="@id"/>');
    -->
  </xsl:template>



  <!--  **********************  -->
  <!--  ajaxBrowser body part   -->
  <!--  **********************  -->

  <xsl:template match="kd:ajaxbrowser">
    <div id="browser_{@id}">
      <xsl:if test="count(kd:tab) &gt; 1 or @showtab='true'">
        <xsl:attribute name="class">tabbed</xsl:attribute>
        <ul id="browser_menu_{@id}" class="browser_menu">
          <xsl:apply-templates select="kd:tab"/>
        </ul>
      </xsl:if>
      <div id="subdirx_{@id}" class="browser-directories">
        <ul class="subdirs" id="{@id}_rootdir">
          <xsl:text> </xsl:text>
        </ul>
        <div id="dialogs_{@id}" class="browser-dialogs">&#xA0;
           <xsl:apply-templates select="./kd:actions"/>
        </div>
      </div>
    </div>
  </xsl:template>

  <xsl:template match="kd:ajaxbrowser/kd:tab">
    <li id="browsertab_{../@id}_{@id}">
      <span onclick="kolekti.browsers['{../@id}'].show_tab('{@id}')" class="tab">
        <xsl:apply-templates select="@label|@i:label" mode="i18n"/>
      </span>
    </li>
  </xsl:template>
</xsl:stylesheet>
